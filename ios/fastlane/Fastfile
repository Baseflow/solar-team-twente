# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
def get_version_from_pubspec
  pubspec = YAML.load_file('../../pubspec.yaml')
  version = pubspec['version']
  version.split('+').first # Extract only the version number, excluding the build number
end

default_platform(:ios)

platform :ios do
    desc "Push a new beta build to TestFlight"

    def registerAppleApiKey()
        app_store_connect_api_key(
            issuer_id: "APP_STORE_CONNECT_API_ISSUER_ID",
            key_id: "APP_STORE_CONNECT_API_KEY_ID",
            key_filepath: '../.secrets/app_store_connect_api_key.p8',
            is_key_content_base64: false,
            duration: 1200, # optional (maximum 1200)
            in_house: false # optional but may be required if using match/sigh
        )
    end

    def synchronizeCertificates()
        match(
            type: "appstore",
	    readonly: true,
            app_identifier: [
                "com.baseflow.solarapp"
            ],
            force_for_new_devices: true
        )
    end

    def parseConfigFile(fileName)
        config = Hash.new
        File.open("../../#{fileName}", "r") do |file_handle|
            IO.foreach(file_handle).with_object({}) do |line|
                next if line.to_s.empty?
                next if line.start_with?('#')

                key, value = line.split('=').map(&:strip)
                config[key] = value
            end
        end

        return config
    end

    # Synchronizes all certificates and provisioning profiles on the local machine.
    #
    # Usage:
    # ```
    # bundle exec fastlane certificates
    # ```
    lane :certificates do
        # Setup authentication to allow Fastlane to access the Apple App Store Connect portal.
        registerAppleApiKey()

        # Synchronize certificates and provisioning profiles for the different Scoop versions.
        synchronizeCertificates()
    end

    # Build and upload a beta version to TestFlight on the Apple App Store.
    #
    # This lane takes an `environment` parameter which is used to determine which
    # compile time configuration file should be used when building the Flutter
    # application. Valid values are:
    # - dev, development: create a development version of the Flutter app.
    # - stg, stag, staging: create a staging version of the Flutter app.
    #
    # If no parameter is supplied a production version of the Flutter
    # application is build and uploaded to TestFlight.
    #
    # Usage:
    # ```
    # bundle exec fastlane beta environment:"dev"
    # ```
    lane :beta do |values|
        # Get the contents of the `config` argument. If the argument is not specified fallback to the
        # `settings.dev` configuration file.
        configFile = values.fetch(:config, '.env.prd')
        configuration = parseConfigFile(configFile)

	    certificates()

    	version = get_version_from_pubspec
    	# Increments the build number to be 1 greater than the latest build number on TestFlight.
        increment_build_number({
            build_number: latest_testflight_build_number(
                version: version,
                app_identifier: configuration['APP_ID_IOS'],
                api_key_path: '../.secrets/app_store_key.json'
            ) + 1
        })

        sh "chmod -R 777 ../../"
        sh(
            "bash",
            "../scripts/flutter_build_ios.sh",
            "-c", configFile,
            "-s", configuration["SECRETS_CONFIG_PATH"]
        )

        # Archive the iOS application (skipping the build stap as this is already done by the Flutter script).
        build_app(
            export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
            skip_build_archive: true,
            archive_path: "../build/ios/archive/Runner.xcarchive",
            export_method: "app-store"
        )

        # Upload the build to Apple TestFlight.
        upload_to_testflight(
            api_key_path: '../.secrets/app_store_key.json'
        )
    end
end
